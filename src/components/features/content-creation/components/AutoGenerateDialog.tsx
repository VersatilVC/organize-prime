import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Bot, Loader2, Sparkles } from 'lucide-react';
import { useContentTypeOptions, useTargetAudienceOptions } from '@/hooks/content-creation';
import { useAuth } from '@/auth/AuthProvider';
import { useOrganization } from '@/contexts/OrganizationContext';

const autoGenerateSchema = z.object({
  contentType: z.string().min(1, 'Content type is required'),
  targetAudience: z.string().min(1, 'Target audience is required'),
});

export type AutoGenerateFormData = z.infer<typeof autoGenerateSchema>;

interface AutoGenerateDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: AutoGenerateFormData) => Promise<void>;
  isLoading?: boolean;
}

export const AutoGenerateDialog = React.memo<AutoGenerateDialogProps>(({
  isOpen,
  onClose,
  onSubmit,
  isLoading = false
}) => {
  const form = useForm<AutoGenerateFormData>({
    resolver: zodResolver(autoGenerateSchema),
    defaultValues: {
      contentType: '',
      targetAudience: ''
    }
  });

  // Authentication state
  const { user } = useAuth();
  const { currentOrganization } = useOrganization();

  // Data fetching
  const { data: contentTypeOptions = [], isLoading: loadingContentTypes } = useContentTypeOptions();
  const { data: audienceOptions = [], isLoading: loadingAudiences } = useTargetAudienceOptions();

  const handleSubmit = async (data: AutoGenerateFormData) => {
    // Validate authentication before submitting
    if (!user || !currentOrganization?.id) {
      form.setError('root', {
        type: 'manual',
        message: 'Authentication required. Please refresh the page and try again.'
      });
      return;
    }

    try {
      await onSubmit(data);
      form.reset();
      onClose();
    } catch (error) {
      // Error handling is done in the parent component
    }
  };

  const handleClose = () => {
    form.reset();
    onClose();
  };

  // Check if authentication and data are ready
  const isFormLoading = loadingContentTypes || loadingAudiences;
  const isAuthReady = user && currentOrganization?.id;
  const canSubmit = isAuthReady && !isFormLoading && !isLoading;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <div className="p-1.5 bg-purple-100 dark:bg-purple-900/20 rounded-lg">
              <Bot className="h-4 w-4 text-purple-600 dark:text-purple-400" />
            </div>
            Auto Generate Content Ideas
          </DialogTitle>
          <DialogDescription>
            Generate 1-3 content ideas automatically based on your preferences. 
            Our AI will create relevant and engaging ideas for your marketing campaigns.
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
            {/* Show root form errors */}
            {form.formState.errors.root && (
              <div className="text-sm text-destructive bg-destructive/10 p-3 rounded-md">
                {form.formState.errors.root.message}
              </div>
            )}
            
            {/* Show authentication status */}
            {!isAuthReady && (
              <div className="text-sm text-amber-600 bg-amber-50 dark:bg-amber-900/20 p-3 rounded-md">
                Waiting for authentication... Please wait or refresh the page if this persists.
              </div>
            )}
            {/* Content Type */}
            <FormField
              control={form.control}
              name="contentType"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Content Type *</FormLabel>
                  <Select 
                    onValueChange={field.onChange} 
                    defaultValue={field.value}
                    disabled={!canSubmit}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select content type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {contentTypeOptions.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormDescription>
                    Choose the type of content you want to generate ideas for
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Target Audience */}
            <FormField
              control={form.control}
              name="targetAudience"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Target Audience *</FormLabel>
                  <Select 
                    onValueChange={field.onChange} 
                    defaultValue={field.value}
                    disabled={!canSubmit}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select target audience" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {audienceOptions.map((audience) => (
                        <SelectItem key={audience.value} value={audience.value}>
                          {audience.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormDescription>
                    Define who your content should target
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={handleClose}
                disabled={isLoading}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={!canSubmit}
                className="min-w-[120px]"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate Ideas
                  </>
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
});

AutoGenerateDialog.displayName = 'AutoGenerateDialog';