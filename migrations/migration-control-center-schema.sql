-- Migration Control Center Database Schema
-- Part of Phase 7: Migration Dashboard UI
-- Handles centralized monitoring, control, and management for webhook migrations

-- System Overview table
CREATE TABLE IF NOT EXISTS system_overview (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  health_score DECIMAL DEFAULT 0,\n  total_migrations INTEGER DEFAULT 0,\n  active_migrations INTEGER DEFAULT 0,\n  success_rate DECIMAL DEFAULT 0,\n  system_load DECIMAL DEFAULT 0,\n  data_integrity DECIMAL DEFAULT 0,\n  performance_index INTEGER DEFAULT 0,\n  critical_issues INTEGER DEFAULT 0,\n  metadata JSONB NOT NULL DEFAULT '{}',\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System Health Tracking table\nCREATE TABLE IF NOT EXISTS system_health_tracking (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  component TEXT NOT NULL, -- 'analysis', 'discovery', 'rules', 'orchestrator', 'transformation', 'validation'\n  status TEXT NOT NULL DEFAULT 'unknown', -- 'healthy', 'warning', 'error', 'critical', 'unknown'\n  health_score DECIMAL DEFAULT 0,\n  last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  error_rate DECIMAL DEFAULT 0,\n  performance DECIMAL DEFAULT 0,\n  uptime BIGINT DEFAULT 0,\n  issues JSONB NOT NULL DEFAULT '[]',\n  metrics JSONB NOT NULL DEFAULT '{}',\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Migration Control Center Events table\nCREATE TABLE IF NOT EXISTS control_center_events (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  event_type TEXT NOT NULL, -- 'system_start', 'system_stop', 'migration_start', 'migration_complete', 'alert_triggered', 'emergency_stop'\n  event_category TEXT NOT NULL DEFAULT 'system', -- 'system', 'migration', 'performance', 'security', 'maintenance'\n  severity TEXT NOT NULL DEFAULT 'info', -- 'info', 'warning', 'error', 'critical'\n  title TEXT NOT NULL,\n  description TEXT,\n  source_component TEXT,\n  affected_resources JSONB NOT NULL DEFAULT '[]',\n  event_data JSONB NOT NULL DEFAULT '{}',\n  user_id UUID REFERENCES auth.users(id),\n  resolved BOOLEAN NOT NULL DEFAULT FALSE,\n  resolved_by UUID REFERENCES auth.users(id),\n  resolved_at TIMESTAMP WITH TIME ZONE,\n  resolution_notes TEXT,\n  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Resource Utilization Metrics table\nCREATE TABLE IF NOT EXISTS resource_utilization_metrics (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  metric_type TEXT NOT NULL, -- 'cpu', 'memory', 'database', 'network', 'storage'\n  current_value DECIMAL NOT NULL,\n  peak_value DECIMAL NOT NULL,\n  average_value DECIMAL NOT NULL,\n  threshold_value DECIMAL NOT NULL,\n  trend TEXT NOT NULL DEFAULT 'stable', -- 'increasing', 'decreasing', 'stable'\n  history JSONB NOT NULL DEFAULT '[]',\n  collected_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System Alerts table\nCREATE TABLE IF NOT EXISTS system_alerts (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  alert_type TEXT NOT NULL, -- 'system', 'migration', 'performance', 'security', 'maintenance'\n  severity TEXT NOT NULL, -- 'low', 'medium', 'high', 'critical'\n  title TEXT NOT NULL,\n  message TEXT NOT NULL,\n  source TEXT NOT NULL,\n  affected_components JSONB NOT NULL DEFAULT '[]',\n  alert_data JSONB NOT NULL DEFAULT '{}',\n  acknowledged BOOLEAN NOT NULL DEFAULT FALSE,\n  acknowledged_by UUID REFERENCES auth.users(id),\n  acknowledged_at TIMESTAMP WITH TIME ZONE,\n  resolved BOOLEAN NOT NULL DEFAULT FALSE,\n  resolved_by UUID REFERENCES auth.users(id),\n  resolved_at TIMESTAMP WITH TIME ZONE,\n  resolution_notes TEXT,\n  escalated BOOLEAN NOT NULL DEFAULT FALSE,\n  escalated_at TIMESTAMP WITH TIME ZONE,\n  actions JSONB NOT NULL DEFAULT '[]',\n  auto_resolve_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Migration Analytics table\nCREATE TABLE IF NOT EXISTS migration_analytics (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  timeframe TEXT NOT NULL, -- '1d', '7d', '30d', '90d'\n  metric_name TEXT NOT NULL,\n  metric_value DECIMAL NOT NULL,\n  metric_data JSONB NOT NULL DEFAULT '{}',\n  trend_direction TEXT NOT NULL DEFAULT 'stable', -- 'up', 'down', 'stable'\n  change_percent DECIMAL DEFAULT 0,\n  calculated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Performance Benchmarks table\nCREATE TABLE IF NOT EXISTS performance_benchmarks (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  benchmark_type TEXT NOT NULL, -- 'migration_throughput', 'response_time', 'error_rate', 'data_quality'\n  current_value DECIMAL NOT NULL,\n  baseline_value DECIMAL NOT NULL,\n  target_value DECIMAL NOT NULL,\n  industry_average DECIMAL,\n  historical_average DECIMAL,\n  performance_score DECIMAL DEFAULT 0,\n  improvement_opportunity TEXT,\n  measured_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- System Configuration table\nCREATE TABLE IF NOT EXISTS system_configuration (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  config_category TEXT NOT NULL, -- 'migration_settings', 'performance_settings', 'security_settings', 'notification_settings'\n  config_key TEXT NOT NULL,\n  config_value JSONB NOT NULL,\n  default_value JSONB NOT NULL,\n  config_description TEXT,\n  is_sensitive BOOLEAN NOT NULL DEFAULT FALSE,\n  requires_restart BOOLEAN NOT NULL DEFAULT FALSE,\n  validation_rules JSONB NOT NULL DEFAULT '{}',\n  updated_by UUID REFERENCES auth.users(id),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  UNIQUE(organization_id, config_category, config_key)\n);\n\n-- Administrative Operations Log table\nCREATE TABLE IF NOT EXISTS admin_operations_log (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  operation_type TEXT NOT NULL, -- 'emergency_stop', 'force_refresh', 'pause_migration', 'resume_migration', 'acknowledge_alert'\n  operation_target TEXT, -- migration_id, alert_id, etc.\n  operation_params JSONB NOT NULL DEFAULT '{}',\n  initiated_by UUID REFERENCES auth.users(id),\n  status TEXT NOT NULL DEFAULT 'pending', -- 'pending', 'in_progress', 'completed', 'failed'\n  result JSONB NOT NULL DEFAULT '{}',\n  error_message TEXT,\n  started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  completed_at TIMESTAMP WITH TIME ZONE,\n  duration INTEGER, -- milliseconds\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Migration Forecasting table\nCREATE TABLE IF NOT EXISTS migration_forecasting (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,\n  forecast_type TEXT NOT NULL, -- 'completion_estimate', 'resource_requirements', 'risk_assessment'\n  forecast_horizon TEXT NOT NULL, -- '1h', '24h', '7d', '30d'\n  forecast_data JSONB NOT NULL DEFAULT '{}',\n  confidence_level DECIMAL DEFAULT 0,\n  accuracy_score DECIMAL DEFAULT 0,\n  model_version TEXT,\n  input_parameters JSONB NOT NULL DEFAULT '{}',\n  generated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  expires_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_system_overview_org_timestamp ON system_overview(organization_id, timestamp DESC);\nCREATE INDEX IF NOT EXISTS idx_system_health_tracking_org_component ON system_health_tracking(organization_id, component);\nCREATE INDEX IF NOT EXISTS idx_system_health_tracking_status ON system_health_tracking(status, updated_at DESC);\nCREATE INDEX IF NOT EXISTS idx_control_center_events_org_type ON control_center_events(organization_id, event_type);\nCREATE INDEX IF NOT EXISTS idx_control_center_events_timestamp ON control_center_events(timestamp DESC);\nCREATE INDEX IF NOT EXISTS idx_control_center_events_severity ON control_center_events(severity, resolved);\nCREATE INDEX IF NOT EXISTS idx_resource_utilization_org_type ON resource_utilization_metrics(organization_id, metric_type);\nCREATE INDEX IF NOT EXISTS idx_resource_utilization_collected ON resource_utilization_metrics(collected_at DESC);\nCREATE INDEX IF NOT EXISTS idx_system_alerts_org_severity ON system_alerts(organization_id, severity);\nCREATE INDEX IF NOT EXISTS idx_system_alerts_acknowledged ON system_alerts(acknowledged, created_at DESC);\nCREATE INDEX IF NOT EXISTS idx_migration_analytics_org_timeframe ON migration_analytics(organization_id, timeframe);\nCREATE INDEX IF NOT EXISTS idx_migration_analytics_calculated ON migration_analytics(calculated_at DESC);\nCREATE INDEX IF NOT EXISTS idx_performance_benchmarks_org_type ON performance_benchmarks(organization_id, benchmark_type);\nCREATE INDEX IF NOT EXISTS idx_system_configuration_org_category ON system_configuration(organization_id, config_category);\nCREATE INDEX IF NOT EXISTS idx_admin_operations_log_org_type ON admin_operations_log(organization_id, operation_type);\nCREATE INDEX IF NOT EXISTS idx_admin_operations_log_started ON admin_operations_log(started_at DESC);\nCREATE INDEX IF NOT EXISTS idx_migration_forecasting_org_type ON migration_forecasting(organization_id, forecast_type);\nCREATE INDEX IF NOT EXISTS idx_migration_forecasting_expires ON migration_forecasting(expires_at);\n\n-- RLS Policies for data isolation\nALTER TABLE system_overview ENABLE ROW LEVEL SECURITY;\nALTER TABLE system_health_tracking ENABLE ROW LEVEL SECURITY;\nALTER TABLE control_center_events ENABLE ROW LEVEL SECURITY;\nALTER TABLE resource_utilization_metrics ENABLE ROW LEVEL SECURITY;\nALTER TABLE system_alerts ENABLE ROW LEVEL SECURITY;\nALTER TABLE migration_analytics ENABLE ROW LEVEL SECURITY;\nALTER TABLE performance_benchmarks ENABLE ROW LEVEL SECURITY;\nALTER TABLE system_configuration ENABLE ROW LEVEL SECURITY;\nALTER TABLE admin_operations_log ENABLE ROW LEVEL SECURITY;\nALTER TABLE migration_forecasting ENABLE ROW LEVEL SECURITY;\n\n-- System Overview policies\nCREATE POLICY \"system_overview_org_isolation\" ON system_overview\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- System Health Tracking policies\nCREATE POLICY \"system_health_tracking_org_isolation\" ON system_health_tracking\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- Control Center Events policies\nCREATE POLICY \"control_center_events_org_isolation\" ON control_center_events\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- Resource Utilization Metrics policies\nCREATE POLICY \"resource_utilization_metrics_org_isolation\" ON resource_utilization_metrics\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- System Alerts policies\nCREATE POLICY \"system_alerts_org_isolation\" ON system_alerts\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- Migration Analytics policies\nCREATE POLICY \"migration_analytics_org_isolation\" ON migration_analytics\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- Performance Benchmarks policies\nCREATE POLICY \"performance_benchmarks_org_isolation\" ON performance_benchmarks\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- System Configuration policies (admin only for sensitive configs)\nCREATE POLICY \"system_configuration_org_isolation\" ON system_configuration\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n  AND (NOT is_sensitive OR is_org_admin(organization_id))\n);\n\n-- Admin Operations Log policies\nCREATE POLICY \"admin_operations_log_org_isolation\" ON admin_operations_log\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- Migration Forecasting policies\nCREATE POLICY \"migration_forecasting_org_isolation\" ON migration_forecasting\nFOR ALL USING (\n  organization_id IN (\n    SELECT organization_id FROM memberships \n    WHERE user_id = auth.uid() AND status = 'active'\n  )\n);\n\n-- Helper Functions\n\n-- Function to get current system overview\nCREATE OR REPLACE FUNCTION get_current_system_overview(org_id UUID)\nRETURNS TABLE (\n  overall_health_score DECIMAL,\n  total_migrations BIGINT,\n  active_migrations BIGINT,\n  success_rate DECIMAL,\n  system_load DECIMAL,\n  critical_issues BIGINT,\n  last_updated TIMESTAMP WITH TIME ZONE\n) AS $$\nBEGIN\n  RETURN QUERY\n  WITH latest_overview AS (\n    SELECT *\n    FROM system_overview \n    WHERE organization_id = org_id \n    ORDER BY timestamp DESC \n    LIMIT 1\n  ),\n  migration_stats AS (\n    SELECT \n      COUNT(*) as total,\n      COUNT(*) FILTER (WHERE status IN ('running', 'queued')) as active\n    FROM migration_batches \n    WHERE organization_id = org_id\n  ),\n  success_stats AS (\n    SELECT \n      COALESCE(AVG(CASE WHEN status = 'completed' THEN 1.0 ELSE 0.0 END), 0) as rate\n    FROM migration_batches \n    WHERE organization_id = org_id\n  ),\n  issue_stats AS (\n    SELECT COUNT(*) as critical\n    FROM system_alerts \n    WHERE organization_id = org_id \n      AND severity = 'critical' \n      AND resolved = FALSE\n  )\n  SELECT \n    COALESCE(lo.health_score, 0.0),\n    ms.total,\n    ms.active,\n    ss.rate,\n    COALESCE(lo.system_load, 0.0),\n    i.critical,\n    COALESCE(lo.timestamp, NOW())\n  FROM migration_stats ms, success_stats ss, issue_stats i\n  LEFT JOIN latest_overview lo ON TRUE;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to update system health component\nCREATE OR REPLACE FUNCTION update_system_health_component(\n  org_id UUID,\n  component_name TEXT,\n  health_status TEXT,\n  health_score DECIMAL DEFAULT NULL,\n  error_rate DECIMAL DEFAULT NULL,\n  performance DECIMAL DEFAULT NULL,\n  issues JSONB DEFAULT '[]'::JSONB\n)\nRETURNS UUID AS $$\nDECLARE\n  health_id UUID;\nBEGIN\n  INSERT INTO system_health_tracking (\n    organization_id,\n    component,\n    status,\n    health_score,\n    error_rate,\n    performance,\n    issues,\n    updated_at\n  ) VALUES (\n    org_id,\n    component_name,\n    health_status,\n    COALESCE(health_score, 0.0),\n    COALESCE(error_rate, 0.0),\n    COALESCE(performance, 0.0),\n    issues,\n    NOW()\n  )\n  ON CONFLICT (organization_id, component) \n  DO UPDATE SET\n    status = EXCLUDED.status,\n    health_score = EXCLUDED.health_score,\n    error_rate = EXCLUDED.error_rate,\n    performance = EXCLUDED.performance,\n    issues = EXCLUDED.issues,\n    updated_at = EXCLUDED.updated_at\n  RETURNING id INTO health_id;\n  \n  RETURN health_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to record resource utilization\nCREATE OR REPLACE FUNCTION record_resource_utilization(\n  org_id UUID,\n  metric_type TEXT,\n  current_val DECIMAL,\n  peak_val DECIMAL DEFAULT NULL,\n  avg_val DECIMAL DEFAULT NULL,\n  threshold_val DECIMAL DEFAULT 100.0\n)\nRETURNS UUID AS $$\nDECLARE\n  metric_id UUID;\n  calculated_trend TEXT := 'stable';\n  history_data JSONB;\nBEGIN\n  -- Build history entry\n  history_data := jsonb_build_object(\n    'timestamp', NOW(),\n    'value', current_val\n  );\n  \n  -- Simple trend calculation (would be more sophisticated in production)\n  IF current_val > COALESCE(avg_val, current_val) * 1.1 THEN\n    calculated_trend := 'increasing';\n  ELSIF current_val < COALESCE(avg_val, current_val) * 0.9 THEN\n    calculated_trend := 'decreasing';\n  END IF;\n  \n  INSERT INTO resource_utilization_metrics (\n    organization_id,\n    metric_type,\n    current_value,\n    peak_value,\n    average_value,\n    threshold_value,\n    trend,\n    history\n  ) VALUES (\n    org_id,\n    metric_type,\n    current_val,\n    COALESCE(peak_val, current_val),\n    COALESCE(avg_val, current_val),\n    threshold_val,\n    calculated_trend,\n    jsonb_build_array(history_data)\n  ) RETURNING id INTO metric_id;\n  \n  RETURN metric_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to create system alert\nCREATE OR REPLACE FUNCTION create_system_alert(\n  org_id UUID,\n  alert_type TEXT,\n  severity TEXT,\n  title TEXT,\n  message TEXT,\n  source TEXT,\n  affected_components JSONB DEFAULT '[]'::JSONB,\n  alert_data JSONB DEFAULT '{}'::JSONB,\n  actions JSONB DEFAULT '[]'::JSONB\n)\nRETURNS UUID AS $$\nDECLARE\n  alert_id UUID;\n  auto_resolve_time TIMESTAMP WITH TIME ZONE;\nBEGIN\n  -- Set auto-resolve time based on severity\n  CASE severity\n    WHEN 'low' THEN auto_resolve_time := NOW() + INTERVAL '7 days';\n    WHEN 'medium' THEN auto_resolve_time := NOW() + INTERVAL '3 days';\n    WHEN 'high' THEN auto_resolve_time := NOW() + INTERVAL '1 day';\n    WHEN 'critical' THEN auto_resolve_time := NULL; -- Manual resolution required\n    ELSE auto_resolve_time := NOW() + INTERVAL '1 day';\n  END CASE;\n  \n  INSERT INTO system_alerts (\n    organization_id,\n    alert_type,\n    severity,\n    title,\n    message,\n    source,\n    affected_components,\n    alert_data,\n    actions,\n    auto_resolve_at\n  ) VALUES (\n    org_id,\n    alert_type,\n    severity,\n    title,\n    message,\n    source,\n    affected_components,\n    alert_data,\n    actions,\n    auto_resolve_time\n  ) RETURNING id INTO alert_id;\n  \n  -- Log the alert creation event\n  INSERT INTO control_center_events (\n    organization_id,\n    event_type,\n    event_category,\n    severity,\n    title,\n    description,\n    source_component,\n    event_data\n  ) VALUES (\n    org_id,\n    'alert_triggered',\n    'system',\n    severity,\n    'System Alert Created',\n    'Alert: ' || title,\n    source,\n    jsonb_build_object('alert_id', alert_id, 'alert_type', alert_type)\n  );\n  \n  RETURN alert_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to acknowledge alert\nCREATE OR REPLACE FUNCTION acknowledge_alert(\n  alert_id UUID,\n  user_id UUID\n)\nRETURNS BOOLEAN AS $$\nDECLARE\n  org_id UUID;\nBEGIN\n  UPDATE system_alerts \n  SET \n    acknowledged = TRUE,\n    acknowledged_by = user_id,\n    acknowledged_at = NOW()\n  WHERE id = alert_id\n  RETURNING organization_id INTO org_id;\n  \n  IF FOUND THEN\n    -- Log the acknowledgment\n    INSERT INTO control_center_events (\n      organization_id,\n      event_type,\n      event_category,\n      severity,\n      title,\n      description,\n      source_component,\n      user_id,\n      event_data\n    ) VALUES (\n      org_id,\n      'alert_acknowledged',\n      'system',\n      'info',\n      'Alert Acknowledged',\n      'System alert was acknowledged by user',\n      'control_center',\n      user_id,\n      jsonb_build_object('alert_id', alert_id)\n    );\n    \n    RETURN TRUE;\n  END IF;\n  \n  RETURN FALSE;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to log administrative operation\nCREATE OR REPLACE FUNCTION log_admin_operation(\n  org_id UUID,\n  operation_type TEXT,\n  operation_target TEXT DEFAULT NULL,\n  operation_params JSONB DEFAULT '{}'::JSONB,\n  initiated_by UUID DEFAULT NULL\n)\nRETURNS UUID AS $$\nDECLARE\n  operation_id UUID;\nBEGIN\n  INSERT INTO admin_operations_log (\n    organization_id,\n    operation_type,\n    operation_target,\n    operation_params,\n    initiated_by\n  ) VALUES (\n    org_id,\n    operation_type,\n    operation_target,\n    operation_params,\n    initiated_by\n  ) RETURNING id INTO operation_id;\n  \n  -- Log the operation event\n  INSERT INTO control_center_events (\n    organization_id,\n    event_type,\n    event_category,\n    severity,\n    title,\n    description,\n    source_component,\n    user_id,\n    event_data\n  ) VALUES (\n    org_id,\n    'admin_operation',\n    'system',\n    'info',\n    'Administrative Operation',\n    'Operation: ' || operation_type,\n    'control_center',\n    initiated_by,\n    jsonb_build_object(\n      'operation_id', operation_id,\n      'operation_type', operation_type,\n      'target', operation_target\n    )\n  );\n  \n  RETURN operation_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to complete administrative operation\nCREATE OR REPLACE FUNCTION complete_admin_operation(\n  operation_id UUID,\n  operation_status TEXT,\n  result JSONB DEFAULT '{}'::JSONB,\n  error_message TEXT DEFAULT NULL\n)\nRETURNS BOOLEAN AS $$\nBEGIN\n  UPDATE admin_operations_log \n  SET \n    status = operation_status,\n    result = result,\n    error_message = error_message,\n    completed_at = NOW(),\n    duration = EXTRACT(EPOCH FROM (NOW() - started_at)) * 1000\n  WHERE id = operation_id;\n  \n  RETURN FOUND;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to clean up old data\nCREATE OR REPLACE FUNCTION cleanup_control_center_data()\nRETURNS INTEGER AS $$\nDECLARE\n  deleted_count INTEGER := 0;\n  temp_count INTEGER;\nBEGIN\n  -- Clean up old system overview entries (keep last 30 days)\n  DELETE FROM system_overview \n  WHERE timestamp < NOW() - INTERVAL '30 days';\n  \n  GET DIAGNOSTICS temp_count = ROW_COUNT;\n  deleted_count := deleted_count + temp_count;\n  \n  -- Clean up old resource utilization metrics (keep last 7 days)\n  DELETE FROM resource_utilization_metrics \n  WHERE collected_at < NOW() - INTERVAL '7 days';\n  \n  GET DIAGNOSTICS temp_count = ROW_COUNT;\n  deleted_count := deleted_count + temp_count;\n  \n  -- Clean up resolved alerts older than 30 days\n  DELETE FROM system_alerts \n  WHERE resolved = TRUE \n    AND resolved_at < NOW() - INTERVAL '30 days';\n  \n  GET DIAGNOSTICS temp_count = ROW_COUNT;\n  deleted_count := deleted_count + temp_count;\n  \n  -- Clean up old analytics data (keep last 90 days)\n  DELETE FROM migration_analytics \n  WHERE calculated_at < NOW() - INTERVAL '90 days';\n  \n  GET DIAGNOSTICS temp_count = ROW_COUNT;\n  deleted_count := deleted_count + temp_count;\n  \n  -- Clean up old events (keep last 60 days)\n  DELETE FROM control_center_events \n  WHERE timestamp < NOW() - INTERVAL '60 days';\n  \n  GET DIAGNOSTICS temp_count = ROW_COUNT;\n  deleted_count := deleted_count + temp_count;\n  \n  -- Clean up expired forecasting data\n  DELETE FROM migration_forecasting \n  WHERE expires_at < NOW();\n  \n  GET DIAGNOSTICS temp_count = ROW_COUNT;\n  deleted_count := deleted_count + temp_count;\n  \n  RETURN deleted_count;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to auto-resolve expired alerts\nCREATE OR REPLACE FUNCTION auto_resolve_expired_alerts()\nRETURNS INTEGER AS $$\nDECLARE\n  resolved_count INTEGER;\nBEGIN\n  UPDATE system_alerts \n  SET \n    resolved = TRUE,\n    resolved_at = NOW(),\n    resolution_notes = 'Auto-resolved: Alert expired based on severity and age'\n  WHERE resolved = FALSE \n    AND auto_resolve_at IS NOT NULL \n    AND auto_resolve_at < NOW();\n  \n  GET DIAGNOSTICS resolved_count = ROW_COUNT;\n  \n  RETURN resolved_count;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Insert default system configuration\nINSERT INTO system_configuration (\n  organization_id,\n  config_category,\n  config_key,\n  config_value,\n  default_value,\n  config_description\n) VALUES \n-- Migration Settings\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'migration_settings',\n  'default_batch_size',\n  '100'::JSONB,\n  '100'::JSONB,\n  'Default batch size for migration processing'\n),\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'migration_settings',\n  'max_concurrent_migrations',\n  '5'::JSONB,\n  '5'::JSONB,\n  'Maximum number of concurrent migrations allowed'\n),\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'migration_settings',\n  'retry_attempts',\n  '3'::JSONB,\n  '3'::JSONB,\n  'Number of retry attempts for failed operations'\n),\n-- Performance Settings\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'performance_settings',\n  'monitoring_interval',\n  '30000'::JSONB,\n  '30000'::JSONB,\n  'Monitoring data collection interval in milliseconds'\n),\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'performance_settings',\n  'alert_thresholds',\n  '{\"cpu\": 80, \"memory\": 85, \"database\": 75, \"error_rate\": 0.05}'::JSONB,\n  '{\"cpu\": 80, \"memory\": 85, \"database\": 75, \"error_rate\": 0.05}'::JSONB,\n  'System alert thresholds for various metrics'\n),\n-- Notification Settings\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'notification_settings',\n  'alert_channels',\n  '[\"email\", \"dashboard\"]'::JSONB,\n  '[\"email\", \"dashboard\"]'::JSONB,\n  'Enabled notification channels for alerts'\n),\n(\n  (SELECT id FROM organizations LIMIT 1),\n  'notification_settings',\n  'escalation_enabled',\n  'true'::JSONB,\n  'true'::JSONB,\n  'Enable alert escalation for unacknowledged critical alerts'\n);\n\nCOMMENT ON TABLE system_overview IS 'High-level system overview snapshots for executive dashboard';\nCOMMENT ON TABLE system_health_tracking IS 'Component-level health tracking and monitoring';\nCOMMENT ON TABLE control_center_events IS 'Centralized event logging for control center operations';\nCOMMENT ON TABLE resource_utilization_metrics IS 'System resource utilization metrics and history';\nCOMMENT ON TABLE system_alerts IS 'System alerts and notifications management';\nCOMMENT ON TABLE migration_analytics IS 'Migration performance analytics and trends';\nCOMMENT ON TABLE performance_benchmarks IS 'Performance benchmarks and comparisons';\nCOMMENT ON TABLE system_configuration IS 'System configuration settings and parameters';\nCOMMENT ON TABLE admin_operations_log IS 'Administrative operations audit log';\nCOMMENT ON TABLE migration_forecasting IS 'Migration forecasting and predictive analytics';\n\nCOMMENT ON FUNCTION get_current_system_overview IS 'Get current system overview with calculated metrics';\nCOMMENT ON FUNCTION update_system_health_component IS 'Update health status for a system component';\nCOMMENT ON FUNCTION record_resource_utilization IS 'Record resource utilization metrics';\nCOMMENT ON FUNCTION create_system_alert IS 'Create a new system alert with automatic categorization';\nCOMMENT ON FUNCTION acknowledge_alert IS 'Acknowledge a system alert';\nCOMMENT ON FUNCTION log_admin_operation IS 'Log an administrative operation';\nCOMMENT ON FUNCTION complete_admin_operation IS 'Mark an administrative operation as completed';\nCOMMENT ON FUNCTION cleanup_control_center_data IS 'Clean up old control center data based on retention policies';\nCOMMENT ON FUNCTION auto_resolve_expired_alerts IS 'Automatically resolve expired alerts based on severity and age';